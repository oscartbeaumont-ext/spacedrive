name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main
      - new-ci
    paths-ignore:
      - '**/.md'
  workflow_dispatch:

# Run tests (doc and normal) and show result in PR's
# Speedy caching

env:
  RUST_LOG: info
  CARGO_INCREMENTAL: 1

jobs:
  build-core:
    name: Build Core (${{ matrix.platform }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: true
      matrix:
        platform: [ubuntu-latest] # , macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            sccache-path: /home/runner/.cache/sccache
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install stuff
        run: ./.github/scripts/setup-system.sh
      
      # - name: Install everything and it's dog
      #   if: matrix.platform == 'ubuntu-latest'
      #   shell: bash
      #   # Taken from: https://trac.ffmpeg.org/wiki/CompilationGuide/Ubuntu
      #   run: |
      #     sudo apt-get update -qq
      #     sudo apt-get -y install \
      #       autoconf \
      #       automake \
      #       build-essential \
      #       cmake \
      #       git-core \
      #       libass-dev \
      #       libfreetype6-dev \
      #       libgnutls28-dev \
      #       libmp3lame-dev \
      #       libsdl2-dev \
      #       libtool \
      #       libva-dev \
      #       libvdpau-dev \
      #       libvorbis-dev \
      #       libxcb1-dev \
      #       libxcb-shm0-dev \
      #       libxcb-xfixes0-dev \
      #       meson \
      #       ninja-build \
      #       pkg-config \
      #       texinfo \
      #       wget \
      #       yasm \
      #       zlib1g-dev
      #     sudo apt-get install -y libavdevice-dev libavfilter-dev libavformat-dev libavcodec-dev libavutil-dev
      
      # - name: Cache cargo state
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cargo-state
      #   with:
      #     path: |
      #       ~/.cargo/registry
      #       ~/.cargo/git
      #       ~/.cargo/bin
      #     key: ${{ matrix.platform }}-stable-${{ env.cache-name }}-${{ hashFiles('**/Cargo.toml') }}-${{ env.CURRENT_DATE }}
      #     restore-keys: |
      #       ${{ matrix.platform }}-stable-${{ env.cache-name }}-${{ hashFiles('**/Cargo.toml') }}-
      #       ${{ matrix.platform }}-stable-${{ env.cache-name }}-
      #       ${{ matrix.platform }}-stable-
      #       ${{ matrix.platform }}-
      
      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, rust-src

      # - name: Cache core cargo target
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cargo-core
      #   with:
      #     path: target
      #     # Add date to the cache to keep it up to date
      #     key: ${{ matrix.platform }}-stable-${{ env.cache-name }}-${{ hashFiles('core/**/Cargo.toml') }}-${{ env.CURRENT_DATE }}
      #     # Restore from outdated cache for speed
      #     restore-keys: |
      #       ${{ matrix.platform }}-stable-${{ env.cache-name }}-${{ hashFiles('core/**/Cargo.toml') }}
      #       ${{ matrix.platform }}-stable-${{ env.cache-name }}-
      #       ${{ matrix.platform }}-stable-
      #       ${{ matrix.platform }}-
      
      # - name: Cache server cargo target
      #   uses: actions/cache@v2
      #   env:
      #     cache-name: cargo-core
      #   with:
      #     path: target
      #     # Add date to the cache to keep it up to date
      #     key: ${{ matrix.platform }}-stable-${{ env.cache-name }}-${{ hashFiles('apps/server/**/Cargo.toml') }}-${{ env.CURRENT_DATE }}
      #     # Restore from outdated cache for speed
      #     restore-keys: |
      #       ${{ matrix.platform }}-stable-${{ env.cache-name }}-${{ hashFiles('apps/server/**/Cargo.toml') }}
      #       ${{ matrix.platform }}-stable-${{ env.cache-name }}-
      #       ${{ matrix.platform }}-stable-
      #       ${{ matrix.platform }}-

      - name: Let's fetch
        run: cargo fetch

      # TODO: Why are all monorepo dependencies being pulled just to run the CLI???
      - name: Generate Prisma client
        working-directory: core
        run: cargo run --frozen -p prisma-cli --release -- generate

      - name: Build Core
        run: cargo build --frozen -p sdcore --release
      
      - name: Build Core (v2)
        run: cargo build --frozen -p sdcore --release
      
      - name: Build Server
        run: cargo build --frozen -p server --release
      
      - name: Build Server (v2)
        run: cargo build --frozen -p server --release
      
      - name: Build Core (v3)
        run: cargo build --frozen -p sdcore --release
